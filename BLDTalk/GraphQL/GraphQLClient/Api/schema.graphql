schema {
  query: Query
  mutation: Mutation
}

type Query {
  products: [Product]
  product(id: ID!): Product
  inventory(sku: String!): Inventory
  orders: [Order]
  order(orderNumber: ID!): Order
}

type Mutation {
  createOrder(createOrderInput: CreateOrderInput!): Order!
}

type Product {
  id: ID!
  name: String!
  sku: String
  description: String!
  color: String!
  size: String!
  price: Float!
  image: String!
  inventory: Inventory!
}

type Inventory {
  id: ID!
  sku: String!
  stock: Int!
}

type LineItem {
  id: ID!
  sku: String!
  quantity: Int!
}

type Order {
  orderNumber: ID!
  deliveryName: String!
  deliveryAddress1: String!
  deliveryAddress2: String
  deliveryCity: String!
  deliveryPostCode: String!
  deliveryCountry: String!
  lineItems: [LineItem!]!
}

input CreateOrderInput {
  deliveryName: String!
  deliveryAddress1: String!
  deliveryAddress2: String
  deliveryCity: String!
  deliveryPostCode: String!
  deliveryCountry: String!
  lineItems: [LineItemInput!]!
}

input LineItemInput {
  sku: String!
  quantity: Int!
}

"The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types."
scalar Name

"Delegates a resolver to a remote schema."
directive @delegate("The path to the field on the remote schema." path: String "The name of the schema to which this field shall be delegated to." schema: Name!) on FIELD_DEFINITION

directive @computed("Specifies the fields on which a computed field is dependent on." dependantOn: [Name!]) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: Name! "The name of the schema to which this type belongs to." schema: Name!) repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE