schema {
  query: Query
  mutation: Mutation
}

type Inventory @source(name: "Inventory", schema: "Inventory") {
  id: ID!
  sku: String!
  stock: Int!
}

type LineItem @source(name: "LineItem", schema: "Order") {
  id: ID!
  sku: String!
  quantity: Int!
}

type Mutation {
  createOrder(createOrderInput: CreateOrderInput!): Order! @delegate(schema: "Order")
}

type Order @source(name: "Order", schema: "Order") {
  orderNumber: ID!
  deliveryName: String!
  deliveryAddress1: String!
  deliveryAddress2: String
  deliveryCity: String!
  deliveryPostCode: String!
  deliveryCountry: String!
  lineItems: [LineItem!]!
}

type Product @source(name: "Product", schema: "Products") {
  id: ID!
  name: String!
  sku: String
  description: String!
  color: String!
  size: String!
  price: Float!
  image: String!
  inventory: Inventory! @delegate(schema: "Inventory", path: "inventory(sku : $fields:sku)")
}

type Query {
  products: [Product] @delegate(schema: "Products")
  product(id: ID!): Product @delegate(schema: "Products")
  inventory(sku: String!): Inventory @delegate(schema: "Inventory")
  orders: [Order] @delegate(schema: "Order")
  order(orderNumber: ID!): Order @delegate(schema: "Order")
}

input CreateOrderInput @source(name: "CreateOrderInput", schema: "Order") {
  deliveryName: String!
  deliveryAddress1: String!
  deliveryAddress2: String
  deliveryCity: String!
  deliveryPostCode: String!
  deliveryCountry: String!
  lineItems: [LineItemInput!]!
}

input LineItemInput @source(name: "LineItemInput", schema: "Order") {
  sku: String!
  quantity: Int!
}

directive @computed("Specifies the fields on which a computed field is dependent on." dependantOn: [Name!]) on FIELD_DEFINITION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"Delegates a resolver to a remote schema."
directive @delegate("The path to the field on the remote schema." path: String "The name of the schema to which this field shall be delegated to." schema: Name!) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: Name! "The name of the schema to which this type belongs to." schema: Name!) repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types."
scalar Name